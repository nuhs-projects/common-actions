name: Deploy Dev AWS ECR image to Dev K8S cluster
on:
  workflow_call:
    inputs:
      image_tags:
        description: |-
          List of image tags to substitute in the generated K8S yaml file, for the AWS dev environment. These are newline-separated `deployment=DEPLOYMENT,tag=TAG`.

          Example:

          ```yaml
          image_tags: |-
            deployment=frontend,tag=189606967604.dkr.ecr.ap-southeast-1.amazonaws.com/chatbot/frontend:123abc
            deployment=backend,tag=189606967604.dkr.ecr.ap-southeast-1.amazonaws.com/chatbot/backend:456def
          ```
        required: true
        type: string
      iam_role:
        description: IAM role for this action to authenticate to AWS
        required: false
        default: arn:aws:iam::189606967604:role/russell-gpt-github-actions
        type: string
      aws_region:
        description: AWS region where the ECR repository is in
        required: false
        default: ap-southeast-1
        type: string
      k8s_cluster_name:
        description: Name of the Dev AWSK8S cluster to deploy on
        required: true
        type: string
      k8s_deployment_folder:
        description: Folder containing the compose.yml and Kustomize overlay folders
        required: false
        type: string
        default: deployment
      deployment_branch_name:
        description: Name of the branch used for deployment artifacts
        required: false
        type: string
        default: deployment

env:
  # Name of folder containing generated kubernetes yamls
  K8S_GENERATED_DIR: ${{ github.run_id }}-${{ github.run_number }}-k8s-generated

permissions:
  contents: write # Required to create and push the `deployment` branch
  id-token: write # Required for requesting the JWT for AWS login

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout ${{ inputs.k8s_deployment_folder }}/
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          sparse-checkout: ${{ inputs.k8s_deployment_folder }}
          sparse-checkout-cone-mode: false

      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4.0.2
        with:
          role-to-assume: ${{ inputs.iam_role }}
          aws-region: ${{ inputs.aws_region }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2

      - name: Update kube config
        run: |
          aws eks update-kubeconfig --name ${{ inputs.k8s_cluster_name }} --region ${{ inputs.aws_region }}

      - name: Setup kompose
        run: |
          curl -L https://github.com/kubernetes/kompose/releases/download/v1.34.0/kompose-linux-amd64 -o /tmp/kompose
          chmod +x /tmp/kompose
          sudo mv /tmp/kompose /usr/local/bin/kompose

      - name: Generate K8S configs and store in /tmp/${{ env.K8S_GENERATED_DIR }}
        run: |
          mkdir -p /tmp/${{ env.K8S_GENERATED_DIR }}

          cd "${{ inputs.k8s_deployment_folder}}"

          # Generate base k8s yamls all in one file, in the repo's deployment/base folder
          # Used by kustomize overlays subsequently
          kompose -f compose.yml convert --stdout >> "base/base.yaml"

          ls

          # Generate for dev, staging and prod
          envs=("dev" "staging" "production")
          for i in "${envs[@]}"; do
              if ! [[ -f "overlays/$i" ]]; then break; fi
              output="/tmp/${{ env.K8S_GENERATED_DIR }}/$i.yaml"
              kubectl kustomize "overlays/$i" >> "$output"
              echo "Created $output"
          done

          # Having base.yaml in the deployment branch is useful
          mv base/base.yaml /tmp/${{ env.K8S_GENERATED_DIR}}

      - name: Create origin/${{ inputs.deployment_branch_name}} branch if it didn't exist, then switch to it and pull
        run: |
          if ! git ls-remote --exit-code --heads origin refs/heads/${{ inputs.deployment_branch_name}}; then
            git checkout --orphan ${{ inputs.deployment_branch_name }}
            git config --global user.email "actions@github.com"
            git config --global user.name "Github Actions"
            git commit --message 'Initial commit' --allow-empty
            git push -u origin ${{ inputs.deployment_branch_name }}
          fi
          git fetch
          git switch ${{ inputs.deployment_branch_name }}
          git pull

      - name: Wipe working directory and copy back deployment yamls in /tmp/${{ env.K8S_GENERATED_DIR }} to it
        run: |
          git rm -rf .
          git clean -fxd
          cp /tmp/${{ env.K8S_GENERATED_DIR }}/* .

      - name: Substitute image tags in the dev K8S yaml (dev.yaml)
        run: |
          while read -r line; do
            IFS=, read -r deployment tag <<<"$line"
            yq -i "select(.kind == Deployment and .metadata.name == $deployment).spec.template.spec.containers[0].image = $tag" dev.yaml
          done <<<'${{ inputs.image_tags }}'

      - name: Validate dev K8S config
        run: |
          kubectl apply -f "dev.yaml" --dry-run=server

      - name: Commit changes
        uses: stefanzweifel/git-auto-commit-action@8621497c8c39c72f3e2a999a26b4ca1b5058a842 # v5
        with:
          commit_message: "Deploying commit ${{ github.sha }} from branch '${{ github.ref_name }}'"

      - name: Deploy dev.yaml to EKS
        run: |
          kubectl -v=9 apply -f deployment/dev.yaml

      - name: Get ingress name and namespace
        id: ingress
        run: |
          echo "name=$(yq -i 'select(.kind == Ingress).metadata.name' dev.yaml)" >> "$GITHUB_OUTPUT"
          echo "namespace=$(yq -i 'select(.kind == Ingress).metadata.namespace' dev.yaml)" >> "GITHUB_OUTPUT"

      - name: Print deployed URL
        run: |
          kubectl wait --for=jsonpath='{.status.loadBalancer.ingress[0].hostname}' "ingress/${{ steps.ingress.outputs.name }}" -n "${{ steps.ingress.outputs.namespace }}"
          echo "# Deployed URL" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          link=$(kubectl get "ingress/${{ steps.ingress.outputs.name }}" -n "${{ steps.ingress.outputs.namespace }}" -o=jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          echo "[Link](http://$link)" >> "$GITHUB_STEP_SUMMARY"
