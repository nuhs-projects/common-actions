name: Build image
on:
  workflow_call:
    inputs:
      ecr_repository:
        description: ECR repository on AWS Dev where your docker images are stored, e.g. chatbot/medivoice
        required: true
        type: string
      iam_role:
        description: IAM role for this action to use, in order to cache builds to AWS ECR.
        required: true
        type: string
      aws_region:
        description: AWS region where the ECR repository is in
        required: true
        type: string
      context:
        description: |-
          Override the default build context,e.g. if your Dockerfile is in a subdirectory.

          By default, we assume your Dockerfile is in the root directory.

          Note that this should be supplied as a Git context, e.g. `https://github.com/<owner>/<repo>.git#<ref>` or `{{defaultContext}}:mysubdir`.

          For more information, see https://github.com/docker/build-push-action?tab=readme-ov-file#git-context
        required: false
        default: "{{defaultContext}}"
        type: string
      build_args:
        description: |-
          List of build-time variables, supplied as newline separated NAME=VALUE, e.g.

          ```yaml
          build-args: |
            COMMIT_SHA=123456
            COMMIT_TIMESTAMP=123456789
          ```

          These are accessible via the ARG instruction in the Dockerfile.

          See https://github.com/docker/build-push-action?tab=readme-ov-file#inputs
        required: false
        type: string
      target:
        description: Name of the stage to build if you are using a multi-stage Dockerfile..
        required: false
        type: string
      push:
        description: Whether to push the image to ECR
        required: false
        default: false
        type: boolean
      extra_tags:
        description: |-
          List of additional tags to apply to the image, supplied as newline separated values, e.g.

          ```yaml
          extra_tags: |
            latest
            v1.0.0
          ```
        required: false
        default: null
        type: string
    secrets:
      SSH_PRIVATE_KEY:
        required: false
        description: |-
          List of SSH private key(s) used to access private repositories.
          See https://github.com/webfactory/ssh-agent/tree/v0.9.0/?tab=readme-ov-file#using-multiple-keys for more information.
    outputs:
      image_tag:
        description: Image reference of the built Docker image. When push=true, this image will be available in the caller's AWS ECR repository. Example format - 123456789012.dkr.ecr.us-east-1.amazonaws.com/my-repo:latest
        value: ${{ jobs.build.outputs.image_tag }}

permissions:
  contents: read # Required to create and push the `deployment` branch
  id-token: write # Required for requesting the JWT for AWS login

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.image.outputs.tag }}
    steps:
      - name: Setup SSH agent
        if: env.SSH_PRIVATE_KEY != ''
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ env.SSH_PRIVATE_KEY }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@c47758b77c9736f4b2ef4073d4d51994fabfe349 # v3

      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4.0.2
        with:
          role-to-assume: ${{ inputs.iam_role }}
          aws-region: ${{ inputs.aws_region }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2

      - name: Get short commit hash
        id: commit
        run: echo "sha_short=$(cut -c1-7 <<<${{ github.sha }})" >> "$GITHUB_OUTPUT"

      - name: Get image tag
        id: image
        run: |
          BASE_TAG=${{ steps.login-ecr.outputs.registry }}/${{ inputs.ecr_repository }}
          TAG="$BASE_TAG:${{ steps.commit.outputs.sha_short }}"
          TAG_LATEST="$BASE_TAG:latest"
          TAG_EXTRA=$(printf "${{ inputs.extra_tags }}" | sed "s#^#$BASE_TAG:#")

          {
            echo "tag=${TAG}"
            echo "tag_latest=${TAG_LATEST}"
            echo "tag_extra=${TAG_EXTRA}"
          } >> "$GITHUB_OUTPUT"

          {
            echo "# Image Tags"
            echo "\`${TAG}\`"
            echo "\`${TAG_LATEST}\`"
            if [[ -n "${TAG_EXTRA}" ]]; then echo "\`${TAG_EXTRA}\`"; fi
          } >> "$GITHUB_STEP_SUMMARY"

      # File mutations prior will be ignored, as we use the git commit as build context
      - name: Build, tag, and cache docker image to Amazon ECR (push=${{ inputs.push }})
        id: build
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        uses: docker/build-push-action@48aba3b46d1b1fec4febb7c5d0c644b249a11355 # v6
        with:
          push: ${{ inputs.push }}
          build-args: ${{ inputs.build_args }}
          target: ${{ inputs.target }}
          context: ${{ inputs.context }}
          platforms: linux/amd64
          cache-to: mode=max,image-manifest=true,oci-mediatypes=true,type=registry,ref=${{env.REGISTRY}}/${{ inputs.ecr_repository }}:${{ inputs.target || 'cache' }}
          cache-from: type=registry,ref=${{env.REGISTRY}}/${{ inputs.ecr_repository }}:${{ inputs.target || 'cache' }}
          provenance: false
          ssh: default # Use the default ssh-agent setup previously
          tags: |
            ${{ steps.image.outputs.tag }}
            ${{ steps.image.outputs.tag_latest }}
            ${{ steps.image.outputs.tag_extra }}
