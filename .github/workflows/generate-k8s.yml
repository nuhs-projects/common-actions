name: Generate K8S configs and commit
on:
  workflow_call:
    inputs:
      # K8S config generation settings
      dev_deployment_tags:
        description: |-
          List of deployment image tags to substitute in the generated dev.yaml, for the AWS dev environment. These are supplied as newline-separated `deployment=DEPLOYMENT,tag=TAG`.

          `deployment` must be the same as the name of the service in your compose.yml.

          You can also use the output of the build.yml workflow as input (see the example in the README).

          Example:

          ```yaml
          dev_deployment_tags: |-
            # Replaces the image tag in the deployment named 'frontend'
            deployment=frontend,tag=189606967604.dkr.ecr.ap-southeast-1.amazonaws.com/chatbot/frontend:123abc
            # Replaces the image tag in the deployment named 'backend'
            deployment=backend,tag=189606967604.dkr.ecr.ap-southeast-1.amazonaws.com/chatbot/backend:456def
          ```
        required: false
        type: string
      staging_deployment_tags:
        description: |-
          List of staging image tags to substitute in the generated staging.yaml for the AWS HCC staging environment.
          See `dev_deployment_tags` for the format.
        required: false
        type: string
      production_deployment_tags:
        description: |-
          List of production image tags to substitute in the generated production.yaml for the AWS HCC production environment.
          See `dev_deployment_tags` for the format.
        required: false
        type: string
      release_tag:
        description: If provided, will create a Github Release with the tag.
        required: false
        type: string
      deployment_branch_name:
        description: |-
           Name of the branch used for deployment artifacts.
           Will be created if it doesn't exist.
        required: false
        type: string
        default: deployment
      k8s_deployment_folder:
        description: Folder containing the compose.yml and Kustomize overlay folders
        required: false
        type: string
        default: deployment

env:
  # Name of temporary folder storing generated kubernetes yamls
  K8S_CONFIG_DIR: ${{ github.run_id }}-${{ github.run_number }}-k8s-generated
  GH_TOKEN: ${{ github.token }} # Required for gh commands

permissions:
  contents: write # Required to create and push the `deployment` branch

jobs:
  generate-k8s-configs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Setup kompose
        run: |
          curl -L https://github.com/kubernetes/kompose/releases/download/v1.34.0/kompose-linux-amd64 -o /tmp/kompose
          chmod +x /tmp/kompose
          sudo mv /tmp/kompose /usr/local/bin/kompose

      - name: Generate K8S configs and store in /tmp/${{ env.K8S_CONFIG_DIR }}
        run: |
          mkdir -p /tmp/${{ env.K8S_CONFIG_DIR }}

          cd "${{ inputs.k8s_deployment_folder}}"

          # Generate base k8s yamls all in one file, in the repo's deployment/base folder
          # Used by kustomize overlays subsequently
          find . -iregex './compose.y.?ml' -exec kompose -f {} convert --stdout \; >> "base/base.yaml"

          # Generate for dev, staging and production, skipping if the corresponding overlay directory does not exist
          envs=("dev" "staging" "production")
          for i in "${envs[@]}"; do
              if ! [[ -d "overlays/$i" ]]; then break; fi
              output="/tmp/${{ env.K8S_CONFIG_DIR }}/$i.yaml"
              kubectl kustomize "overlays/$i" >> "$output"
              echo "Created $output"
          done

          # Having base.yaml in the deployment branch is useful
          mv base/base.yaml /tmp/${{ env.K8S_CONFIG_DIR}}

      - name: Substitute image tags in the dev.yaml
        if: inputs.dev_deployment_tags
        working-directory: /tmp/${{ env.K8S_CONFIG_DIR }}
        run: |
          while read -r line; do
            [[ -z "$line" ]] && continue
            IFS=, read -r deployment_kv tag_kv <<<"$line"
            # shellcheck disable=SC2034
            IFS='=', read -r _key deployment <<<"$deployment_kv"
            # shellcheck disable=SC2034
            IFS='=', read -r _key tag <<<"$tag_kv"
            deployment="$deployment" tag="$tag" yq -i 'select(.kind == "Deployment" and .metadata.name == env(deployment)).spec.template.spec.containers[0].image = env(tag)' dev.yaml
          done <<<'${{ inputs.dev_deployment_tags }}'

      - name: Substitute image tags in staging.yaml
        if: inputs.staging_deployment_tags
        working-directory: /tmp/${{ env.K8S_CONFIG_DIR }}
        run: |
          while read -r line; do
            [[ -z "$line" ]] && continue
            IFS=, read -r deployment_kv tag_kv <<<"$line"
            # shellcheck disable=SC2034
            IFS='=', read -r _key deployment <<<"$deployment_kv"
            # shellcheck disable=SC2034
            IFS='=', read -r _key tag <<<"$tag_kv"
            deployment="$deployment" tag="$tag" yq -i 'select(.kind == "Deployment" and .metadata.name == env(deployment)).spec.template.spec.containers[0].image = env(tag)' staging.yaml
          done <<<'${{ inputs.staging_deployment_tags }}'

      - name: Substitute image tags in production.yaml
        if: inputs.production_deployment_tags
        working-directory: /tmp/${{ env.K8S_CONFIG_DIR }}
        run: |
          while read -r line; do
            [[ -z "$line" ]] && continue
            IFS=, read -r deployment_kv tag_kv <<<"$line"
            # shellcheck disable=SC2034
            IFS='=', read -r _key deployment <<<"$deployment_kv"
            # shellcheck disable=SC2034
            IFS='=', read -r _key tag <<<"$tag_kv"
            deployment="$deployment" tag="$tag" yq -i 'select(.kind == "Deployment" and .metadata.name == env(deployment)).spec.template.spec.containers[0].image = env(tag)' production.yaml
          done <<<'${{ inputs.production_deployment_tags }}'

      - name: Create origin/${{ inputs.deployment_branch_name}} branch if it didn't exist, then switch to it and pull
        run: |
          if ! git ls-remote --exit-code --heads origin refs/heads/${{ inputs.deployment_branch_name}}; then
            git checkout --orphan ${{ inputs.deployment_branch_name }}
            git config --global user.email "actions@github.com"
            git config --global user.name "Github Actions"
            git commit --message 'Initial commit' --allow-empty
            git push -u origin ${{ inputs.deployment_branch_name }}
          fi
          git fetch
          git switch ${{ inputs.deployment_branch_name }}
          git pull

      - name: Wipe working directory and copy back deployment yamls in /tmp/${{ env.K8S_CONFIG_DIR }} to it
        run: |
          git rm -rf .
          git clean -fxd
          cp /tmp/${{ env.K8S_CONFIG_DIR }}/* .

      - name: Commit changes
        uses: stefanzweifel/git-auto-commit-action@778341af668090896ca464160c2def5d1d1a3eb0 # v6
        with:
          commit_message: "Generated deployment artifacts from ${{ github.ref_name }}:${{ github.sha }}"

      - name: Create release
        if: inputs.release_tag
        run: |
          gh release create ${{ inputs.release_tag }} --generate-notes ./*
